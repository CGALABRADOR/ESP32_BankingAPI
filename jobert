from flask import Flask, request, jsonify
from flask_graphql import GraphQLView
import graphene
from datetime import datetime
import json

app = Flask(__name__)

# Mock database structure with accounts, PINs, and cards
accounts_db = [
    {
        "accountId": "ACC001",
        "accountHolder": "John Doe",
        "balance": 5000.50,
        "cardUID": "1234ABCD",
        "pin": "1234",
        "pinAttempts": 0,
        "locked": False
    },
    {
        "accountId": "ACC002",
        "accountHolder": "Jane Smith",
        "balance": 12500.75,
        "cardUID": "5678EFGH",
        "pin": "5678",
        "pinAttempts": 0,
        "locked": False
    }
]

transactions_db = [
    {"accountId": "ACC001", "transactionId": "TXN001", "description": "Salary Deposit", "amount": 5000.0, "type": "credit", "timestamp": 1696900800},
    {"accountId": "ACC001", "transactionId": "TXN002", "description": "ATM Withdrawal", "amount": 150.50, "type": "debit", "timestamp": 1696814400},
    {"accountId": "ACC001", "transactionId": "TXN003", "description": "Utility Bill", "amount": 200.0, "type": "debit", "timestamp": 1696728000},
    {"accountId": "ACC002", "transactionId": "TXN004", "description": "Salary Deposit", "amount": 12500.0, "type": "credit", "timestamp": 1696900800},
]

login_history_db = []

def get_current_timestamp():
    return int(datetime.now().timestamp())

def format_timestamp(timestamp):
    return datetime.fromtimestamp(timestamp).strftime("%Y-%m-%d %H:%M:%S")

# GraphQL Types
class AccountType(graphene.ObjectType):
    account_id = graphene.String()
    account_holder = graphene.String()
    balance = graphene.Float()
    card_uid = graphene.String()
    locked = graphene.Boolean()

class TransactionType(graphene.ObjectType):
    transaction_id = graphene.String()
    account_id = graphene.String()
    description = graphene.String()
    amount = graphene.Float()
    type = graphene.String()
    timestamp = graphene.Int()
    formatted_time = graphene.String()

class LoginHistoryType(graphene.ObjectType):
    account_id = graphene.String()
    account_holder = graphene.String()
    login_time = graphene.String()
    timestamp = graphene.Int()

class AuthenticationResponse(graphene.ObjectType):
    success = graphene.Boolean()
    message = graphene.String()
    account = graphene.Field(AccountType)
    timestamp = graphene.Int()
    formatted_time = graphene.String()

class WithdrawalResponse(graphene.ObjectType):
    success = graphene.Boolean()
    message = graphene.String()
    account_id = graphene.String()
    withdraw_amount = graphene.Float()
    new_balance = graphene.Float()
    timestamp = graphene.Int()
    formatted_time = graphene.String()

class TransactionHistory(graphene.ObjectType):
    account_id = graphene.String()
    transactions = graphene.List(TransactionType)
    count = graphene.Int()

class TimestampResponse(graphene.ObjectType):
    timestamp = graphene.Int()
    formatted_time = graphene.String()

# GraphQL Queries
class Query(graphene.ObjectType):
    # Authenticate with card UID and PIN
    authenticate = graphene.Field(
        AuthenticationResponse,
        card_uid=graphene.String(required=True),
        pin=graphene.String(required=True)
    )

    # Get balance
    balance = graphene.Field(
        AccountType,
        account_id=graphene.String(required=True)
    )

    # Get transaction history
    transactions = graphene.Field(
        TransactionHistory,
        account_id=graphene.String(required=True)
    )

    # Get login history
    login_history = graphene.List(
        LoginHistoryType,
        account_id=graphene.String(required=True)
    )

    # Get current timestamp
    timestamp = graphene.Field(TimestampResponse)

    def resolve_authenticate(self, info, card_uid, pin):
        card_uid = card_uid.upper()

        # Find account by card UID
        account = None
        for acc in accounts_db:
            if acc['cardUID'] == card_uid:
                account = acc
                break

        if not account:
            return AuthenticationResponse(
                success=False,
                message="Card not recognized",
                account=None,
                timestamp=get_current_timestamp(),
                formatted_time=format_timestamp(get_current_timestamp())
            )

        # Check if account is locked
        if account['locked']:
            return AuthenticationResponse(
                success=False,
                message="Account locked. Too many failed attempts.",
                account=None,
                timestamp=get_current_timestamp(),
                formatted_time=format_timestamp(get_current_timestamp())
            )

        # Verify PIN
        if account['pin'] != pin:
            account['pinAttempts'] += 1
            if account['pinAttempts'] >= 3:
                account['locked'] = True
                return AuthenticationResponse(
                    success=False,
                    message="Account locked. Too many failed attempts.",
                    account=None,
                    timestamp=get_current_timestamp(),
                    formatted_time=format_timestamp(get_current_timestamp())
                )
            return AuthenticationResponse(
                success=False,
                message=f"Incorrect PIN. {3 - account['pinAttempts']} attempts remaining.",
                account=None,
                timestamp=get_current_timestamp(),
                formatted_time=format_timestamp(get_current_timestamp())
            )

        # Reset PIN attempts on successful login
        account['pinAttempts'] = 0

        # Log the login
        login_record = {
            "accountId": account['accountId'],
            "accountHolder": account['accountHolder'],
            "loginTime": format_timestamp(get_current_timestamp()),
            "timestamp": get_current_timestamp()
        }
        login_history_db.append(login_record)

        return AuthenticationResponse(
            success=True,
            message="Authentication successful",
            account=AccountType(
                account_id=account['accountId'],
                account_holder=account['accountHolder'],
                balance=account['balance'],
                card_uid=account['cardUID'],
                locked=account['locked']
            ),
            timestamp=get_current_timestamp(),
            formatted_time=format_timestamp(get_current_timestamp())
        )

    def resolve_balance(self, info, account_id):
        for account in accounts_db:
            if account['accountId'] == account_id:
                return AccountType(
                    account_id=account['accountId'],
                    account_holder=account['accountHolder'],
                    balance=account['balance'],
                    card_uid=account['cardUID'],
                    locked=account['locked']
                )
        return None

    def resolve_transactions(self, info, account_id):
        account_transactions = [txn for txn in transactions_db if txn['accountId'] == account_id]

        formatted_txns = []
        for txn in account_transactions:
            formatted_txns.append(TransactionType(
                transaction_id=txn['transactionId'],
                account_id=txn['accountId'],
                description=txn['description'],
                amount=txn['amount'],
                type=txn['type'],
                timestamp=txn['timestamp'],
                formatted_time=format_timestamp(txn['timestamp'])
            ))

        return TransactionHistory(
            account_id=account_id,
            transactions=formatted_txns,
            count=len(formatted_txns)
        )

    def resolve_login_history(self, info, account_id):
        account_logins = [login for login in login_history_db if login['accountId'] == account_id]
        return [LoginHistoryType(**login) for login in account_logins]

    def resolve_timestamp(self, info):
        ts = get_current_timestamp()
        return TimestampResponse(
            timestamp=ts,
            formatted_time=format_timestamp(ts)
        )

# GraphQL Mutations
class WithdrawMoney(graphene.Mutation):
    class Arguments:
        account_id = graphene.String(required=True)
        amount = graphene.Float(required=True)

    Output = WithdrawalResponse

    def mutate(self, info, account_id, amount):
        # Find account
        account = None
        for acc in accounts_db:
            if acc['accountId'] == account_id:
                account = acc
                break

        if not account:
            return WithdrawalResponse(
                success=False,
                message="Account not found",
                account_id=account_id,
                withdraw_amount=0,
                new_balance=0,
                timestamp=get_current_timestamp(),
                formatted_time=format_timestamp(get_current_timestamp())
            )

        if amount > account['balance']:
            return WithdrawalResponse(
                success=False,
                message="Insufficient balance",
                account_id=account_id,
                withdraw_amount=amount,
                new_balance=account['balance'],
                timestamp=get_current_timestamp(),
                formatted_time=format_timestamp(get_current_timestamp())
            )

        # Process withdrawal
        account['balance'] -= amount

        # Add transaction
        transaction = {
            "accountId": account_id,
            "transactionId": f"TXN{len(transactions_db) + 1:03d}",
            "description": "ATM Withdrawal",
            "amount": amount,
            "type": "debit",
            "timestamp": get_current_timestamp()
        }
        transactions_db.append(transaction)

        return WithdrawalResponse(
            success=True,
            message="Withdrawal successful",
            account_id=account_id,
            withdraw_amount=amount,
            new_balance=account['balance'],
            timestamp=get_current_timestamp(),
            formatted_time=format_timestamp(get_current_timestamp())
        )

class Mutation(graphene.ObjectType):
    withdraw_money = WithdrawMoney.Field()

schema = graphene.Schema(query=Query, mutation=Mutation)

# Add GraphQL endpoint
app.add_url_rule(
    '/graphql',
    view_func=GraphQLView.as_view('graphql', schema=schema, graphiql=True)
)

@app.route('/')
def home():
    """Root endpoint with API documentation"""
    html = """
    <!DOCTYPE html>
    <html>
    <head>
      <title>GraphQL Banking API</title>
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh;
          padding: 20px;
        }
        
        .container {
          max-width: 1200px;
          margin: 0 auto;
        }
        
        .header {
          text-align: center;
          color: white;
          margin-bottom: 40px;
        }
        
        .header h1 {
          font-size: 3em;
          margin-bottom: 10px;
          text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        
        .header p {
          font-size: 1.2em;
          opacity: 0.95;
        }
        
        .info-box {
          background: white;
          border-radius: 15px;
          padding: 30px;
          box-shadow: 0 10px 30px rgba(0,0,0,0.2);
          margin-bottom: 30px;
        }
        
        .info-box h2 {
          color: #333;
          margin-bottom: 20px;
        }
        
        .endpoint {
          background: #f9f9f9;
          padding: 15px;
          margin: 10px 0;
          border-left: 4px solid #667eea;
          border-radius: 5px;
        }
        
        .endpoint h3 {
          color: #667eea;
          margin-bottom: 10px;
        }
        
        pre {
          background: #2d2d2d;
          color: #f8f8f2;
          padding: 15px;
          border-radius: 8px;
          overflow-x: auto;
          font-size: 0.9em;
        }
        
        .btn {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border: none;
          padding: 12px 24px;
          border-radius: 8px;
          cursor: pointer;
          font-size: 1em;
          text-decoration: none;
          display: inline-block;
          margin: 10px 5px;
        }
        
        .btn:hover {
          transform: scale(1.05);
          box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .accounts-list {
          background: #f9f9f9;
          border-radius: 10px;
          padding: 15px;
          margin-top: 15px;
        }
        
        .account-item {
          background: white;
          padding: 12px;
          margin-bottom: 10px;
          border-radius: 8px;
          border-left: 4px solid #764ba2;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>🔐 GraphQL Banking API</h1>
          <p>ESP32 RFID Banking System with PIN Authentication</p>
        </div>
        
        <div class="info-box">
          <h2>🚀 Quick Start</h2>
          <p>Access the interactive GraphQL playground to test queries and mutations:</p>
          <a href="/graphql" class="btn">Open GraphQL Playground →</a>
        </div>
        
        <div class="info-box">
          <h2>📋 Authentication Query (ESP32 Usage)</h2>
          <div class="endpoint">
            <h3>Authenticate with Card UID and PIN</h3>
            <p>When user scans card and enters PIN (1234), press # to call this:</p>
            <pre>
query {
  authenticate(cardUid: "1234ABCD", pin: "1234") {
    success
    message
    account {
      accountId
      accountHolder
      balance
    }
    formattedTime
  }
}
            </pre>
          </div>
          
          <div class="endpoint">
            <h3>Get Balance</h3>
            <pre>
query {
  balance(accountId: "ACC001") {
    accountId
    accountHolder
    balance
  }
}
            </pre>
          </div>
          
          <div class="endpoint">
            <h3>Get Transaction History</h3>
            <pre>
query {
  transactions(accountId: "ACC001") {
    accountId
    count
    transactions {
      transactionId
      description
      amount
      type
      formattedTime
    }
  }
}
            </pre>
          </div>
          
          <div class="endpoint">
            <h3>Process Withdrawal</h3>
            <pre>
mutation {
  withdrawMoney(accountId: "ACC001", amount: 100.00) {
    success
    message
    withdrawAmount
    newBalance
    formattedTime
  }
}
            </pre>
          </div>
        </div>
        
        <div class="info-box">
          <h2>👥 Test Accounts</h2>
          <div class="accounts-list">
            <div class="account-item">
              <strong>John Doe</strong><br>
              Account: ACC001<br>
              Card UID: 1234ABCD<br>
              PIN: 1234<br>
              Balance: $5,000.50
            </div>
            <div class="account-item">
              <strong>Jane Smith</strong><br>
              Account: ACC002<br>
              Card UID: 5678EFGH<br>
              PIN: 5678<br>
              Balance: $12,500.75
            </div>
          </div>
        </div>
        
        <div class="info-box">
          <h2>🔒 Security Features</h2>
          <ul style="padding-left: 20px; line-height: 2;">
            <li>PIN verification (4-digit)</li>
            <li>3 failed attempts lock account</li>
            <li>Card UID + PIN authentication</li>
            <li>Login history tracking</li>
            <li>Transaction logging with timestamps</li>
          </ul>
        </div>
      </div>
    </body>
    </html>
    """
    return html

if __name__ == '__main__':
    print("Starting GraphQL Banking API Server...")
    print("GraphQL Playground: http://localhost:5000/graphql")
    print("Documentation: http://localhost:5000")
    print("\nTest Accounts:")
    print("  Card: 1234ABCD | PIN: 1234 | Account: ACC001")
    print("  Card: 5678EFGH | PIN: 5678 | Account: ACC002")
    print("\nServer running on http://localhost:5000")
    app.run(host='0.0.0.0', port=5000, debug=True)
