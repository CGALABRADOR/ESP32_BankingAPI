#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <SPI.h>
#include <MFRC522.h>
#include <ArduinoJson.h>


// ============ WiFi Credentials ============
const char* ssid = "YOUR_SSID";
const char* password = "YOUR_PASSWORD";
const char* serverIP = "192.168.1.100";
const int serverPort = 5000;

// ============ LCD Setup (20x4, I2C address 0x27) ============
LiquidCrystal_I2C lcd(0x27, 20, 4);

// ============ RFID Setup ============
#define SCK_PIN 18
#define MOSI_PIN 23
#define MISO_PIN 19
#define SS_PIN 5
MFRC522 mfrc522(SS_PIN, -1);

// ============ Keypad Setup ============
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {32, 33, 25, 26};
byte colPins[COLS] = {27, 14, 12, 13};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// ============ Account Variables ============
String currentAccount = "";
String rfidUID = "";
float currentBalance = 0.0;
String accountHolder = "";
bool cardScanned = false;

// ============ Function Prototypes ============
void connectToWiFi();
void initializeRFID();
void initializeLCD();
void scanRFID();
void showMainMenu();
void checkBalance();
void performWithdrawal();
void viewHistory();
void displayMessage(String line1, String line2, String line3 = "", String line4 = "", int delayTime = 2000);
String makeAPICall(String endpoint);
String inputAmount();
void updateBalance();
void addTransaction(String description, float amount, String type);

// ============ SETUP ============
void setup() {
    Serial.begin(115200);
delay(1000);

// Initialize components
initializeLCD();
displayMessage("Initializing...", "", "", "", 1000);

connectToWiFi();
initializeRFID();

displayMessage("System Ready!", "Scan RFID Card", "", "", 2000);
showMainMenu();
}

// ============ MAIN LOOP ============
void loop() {
            // Check for RFID card
scanRFID();

// Check for keypad input only if card is scanned
if (cardScanned) {
char key = keypad.getKey();

if (key) {
Serial.println("Key Pressed: " + String(key));

if (key == '1') {
checkBalance();
}
else if (key == '2') {
performWithdrawal();
}
else if (key == '3') {
viewHistory();
}
}
}

delay(100);
}

// ============ RFID SCANNING ============
void scanRFID() {
if (!mfrc522.PICC_IsNewCardPresent()) {
return;
}

if (!mfrc522.PICC_ReadCardSerial()) {
return;
}

// Get the card's UID
rfidUID = "";
for (byte i = 0; i < mfrc522.uid.size; i++) {
rfidUID += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
rfidUID += String(mfrc522.uid.uidByte[i], HEX);
}
rfidUID.toUpperCase();

Serial.println("Card UID: " + rfidUID);

// Map RFID UID to Account ID (you can modify this mapping)
if (rfidUID == "1A2B3C4D") {
currentAccount = "ACC001";
}
else if (rfidUID == "5E6F7G8H") {
currentAccount = "ACC002";
}
else {
displayMessage("Card not", "recognized!", "", "", 2000);
mfrc522.PICC_HaltA();
mfrc522.PCD_StopCrypto1();
return;
}

// Update balance and show menu
updateBalance();
cardScanned = true;

displayMessage("Welcome!", accountHolder, "Card: " + rfidUID.substring(0, 8), "", 2000);
showMainMenu();

// Halt PICC
mfrc522.PICC_HaltA();
mfrc522.PCD_StopCrypto1();
}

// ============ INITIALIZE LCD ============
                           void initializeLCD() {
    lcd.init();
lcd.backlight();
lcd.clear();
}

// ============ CONNECT TO WiFi ============
                           void connectToWiFi() {
    displayMessage("Connecting to", ssid, "", "", 1000);

WiFi.begin(ssid, password);
int attempts = 0;

while (WiFi.status() != WL_CONNECTED && attempts < 20) {
delay(500);
Serial.print(".");
attempts++;
}

if (WiFi.status() == WL_CONNECTED) {
Serial.println("\nWiFi Connected!");
displayMessage("WiFi Connected", WiFi.localIP().toString(), "", "", 2000);
} else {
Serial.println("WiFi Failed!");
displayMessage("WiFi Failed", "Check settings", "", "", 3000);
}
}

// ============ INITIALIZE RFID ============
                           void initializeRFID() {
SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
mfrc522.PCD_Init();
Serial.println("RFID Reader initialized");
}

// ============ SHOW MAIN MENU ============
                          void showMainMenu() {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Menu:");
lcd.setCursor(0, 1);
lcd.print("1:Balance 2:Withdraw");
lcd.setCursor(0, 2);
lcd.print("3:History");
lcd.setCursor(0, 3);
lcd.print("Scan new card to exit");
}

// ============ CHECK BALANCE ============
                      void checkBalance() {
displayMessage("Fetching balance...", "", "", "", 1000);

updateBalance();

lcd.clear();
lcd.setCursor(0, 0);
lcd.print(accountHolder);
lcd.setCursor(0, 1);
lcd.print("Account: " + currentAccount);
lcd.setCursor(0, 2);
lcd.print("Balance: $" + String(currentBalance, 2));
lcd.setCursor(0, 3);
lcd.print("Press any key...");

// Wait for any key press
while (!keypad.getKey()) {
delay(100);
}

showMainMenu();
}

// ============ PERFORM WITHDRAWAL ============
                        void performWithdrawal() {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Enter amount:");
lcd.setCursor(0, 1);
lcd.print("Use keypad");
lcd.setCursor(0, 2);
lcd.print("# confirm, * cancel");

delay(1500);

String amount = inputAmount();

if (amount == "0" || amount == "") {
displayMessage("Cancelled", "Returning...", "", "", 1500);
showMainMenu();
return;
}

float withdrawAmount = amount.toFloat();

if (withdrawAmount > currentBalance) {
displayMessage("Insufficient", "Balance!", "", "", 2000);
}
else if (withdrawAmount > 0) {
currentBalance -= withdrawAmount;

// Add transaction to history
addTransaction("Withdrawal", withdrawAmount, "debit");

lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Withdrawal OK!");
lcd.setCursor(0, 1);
lcd.print("Amount: $" + String(withdrawAmount, 2));
lcd.setCursor(0, 2);
lcd.print("New Balance: $" + String(currentBalance, 2));
lcd.setCursor(0, 3);
lcd.print("Press any key...");

while (!keypad.getKey()) {
delay(100);
}
}

showMainMenu();
}

// ============ VIEW HISTORY ============
                     void viewHistory() {
    displayMessage("Fetching history...", "", "", "", 1000);

String response = makeAPICall("/api/transactions?account=" + currentAccount);

if (response == "") {
displayMessage("Error fetching", "history", "", "", 2000);
showMainMenu();
return;
}

// Parse JSON response
StaticJsonDocument<2000> doc;
deserializeJson(doc, response);

JsonArray transactions = doc["transactions"];

if (transactions.size() == 0) {
displayMessage("No transactions", "found", "", "", 2000);
showMainMenu();
return;
}

// Display each transaction
for (int i = 0; i < transactions.size(); i++) {
JsonObject txn = transactions[i];

lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Transaction " + String(i + 1) + " of " + String(transactions.size()));
lcd.setCursor(0, 1);
lcd.print(txn["description"].as<String>());
lcd.setCursor(0, 2);

String type = txn["type"];
if (type == "credit") {
lcd.print("+ $" + String(txn["amount"].as<float>(), 2));
} else {
lcd.print("- $" + String(txn["amount"].as<float>(), 2));
}

lcd.setCursor(0, 3);
lcd.print(txn["formattedTime"].as<String>());

delay(3000);
}

// Show current timestamp
String timeResponse = makeAPICall("/api/timestamp");
StaticJsonDocument<200> timeDoc;
deserializeJson(timeDoc, timeResponse);

lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Current Time:");
lcd.setCursor(0, 1);
lcd.print(timeDoc["formattedTime"].as<String>());
lcd.setCursor(0, 2);
lcd.print("Press any key...");

while (!keypad.getKey()) {
delay(100);
}

showMainMenu();
}

// ============ INPUT AMOUNT ============
                      String inputAmount() {
String amount = "";
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Amount: $");
lcd.setCursor(0, 1);
lcd.print(amount);

while (true) {
char key = keypad.getKey();

if (key >= '0' && key <= '9') {
if (amount.length() < 10) {  // Limit to 10 digits
amount += key;
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Amount: $");
lcd.setCursor(0, 1);
lcd.print(amount);
}
}
else if (key == '#') {
// Confirm amount
return amount;
}
else if (key == '*') {
// Cancel
return "0";
}
}
}

// ============ UPDATE BALANCE ============
                       void updateBalance() {
    String response = makeAPICall("/api/balance?account=" + currentAccount);

if (response == "") {
    currentBalance = 0.0;
accountHolder = "Error";
return;
}

StaticJsonDocument<200> doc;
deserializeJson(doc, response);

currentBalance = doc["balance"].as<float>();
accountHolder = doc["accountHolder"].as<String>();
}

// ============ ADD TRANSACTION ============
                    void addTransaction(String description, float amount, String type) {
                                                                                       // This can be extended to send transaction data to the server
Serial.println("Transaction: " + description + " - $" + String(amount, 2) + " (" + type + ")");
}

// ============ MAKE API CALL ============
                         String makeAPICall(String endpoint) {
if (WiFi.status() != WL_CONNECTED) {
Serial.println("WiFi not connected");
return "";
}

HTTPClient http;
String url = "http://" + String(serverIP) + ":" + String(serverPort) + endpoint;

Serial.println("Making request to: " + url);

http.begin(url);
int httpCode = http.GET();

String response = "";

if (httpCode > 0) {
response = http.getString();
Serial.println("Response: " + response);
} else {
Serial.println("HTTP Error: " + String(httpCode));
}

http.end();
return response;
}

// ============ DISPLAY MESSAGE ============
                        void displayMessage(String line1, String line2, String line3, String line4, int delayTime) {
lcd.clear();

if (line1 != "") {
lcd.setCursor(0, 0);
lcd.print(line1);
}

if (line2 != "") {
lcd.setCursor(0, 1);
lcd.print(line2);
}

if (line3 != "") {
lcd.setCursor(0, 2);
lcd.print(line3);
}

if (line4 != "") {
lcd.setCursor(0, 3);
lcd.print(line4);
}

delay(delayTime);
}