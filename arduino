#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

// --- Configuration ---
// Your Wi-Fi Credentials
const char* ssid = "WIFI_NAME"; 
const char* password = "WIFI_PASSWORD";

// Your PC's IP Address and Server Port
const char* serverHost = " 10.77.75.98"; //edit to ur pc ip add
const int serverPort = 5001;
const char* graphqlEndpoint = "/graphql"; // The Flask route is already configured with the host/port

// Test Data for GraphQL Authentication Query
const String testCardUID = "1234ABCD";
const String testPIN = "1234";
// --------------------

void setup() {
  Serial.begin(115200);
  Serial.println("\n\n========================================");
  Serial.println("  ESP32 SERVER DIAGNOSTIC TOOL STARTING");
  Serial.println("========================================\n");
  
  // 1. WiFi Connection Test
  connectToWiFi();
  
  if (WiFi.status() == WL_CONNECTED) {
    // 2. Raw TCP Connectivity Test (Checks for AP Isolation / Firewall)
    runRawTcpTest();
    
    // 3. Full HTTP / GraphQL Test (Checks Server Logic / Parsing)
    runFullGraphQLTest();
  }
}

void loop() {
  // Nothing to do here, tests run once in setup
}

// ------------------------------------------------------------------
// --- TEST FUNCTIONS ---
// ------------------------------------------------------------------

void connectToWiFi() {
  Serial.print("Connecting to WiFi ");
  Serial.print(ssid);
  Serial.print("...");
  
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n[SUCCESS] WiFi Connected!");
    Serial.print("  IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n[FATAL] WiFi Connection Failed! Check credentials or stability.");
    while(true) delay(100); 
  }
}

/**
 * Test 1: Raw TCP Connection Check
 * This test uses the underlying WiFiClient to bypass HTTP logic and directly 
 * attempt a TCP handshake on the specified IP and Port.
 * This is the ultimate test for AP Isolation and basic Firewall rules.
 */
void runRawTcpTest() {
  Serial.println("\n--- 1. RAW TCP CONNECTIVITY TEST ---");
  Serial.print("Attempting to connect to ");
  Serial.print(serverHost);
  Serial.print(":");
  Serial.print(serverPort);
  Serial.print("...");

  WiFiClient client;
  
  if (!client.connect(serverHost, serverPort)) {
    Serial.println("\n[FAIL] TCP Connection FAILED! (Error code -1 cause)");
    Serial.println("  DIAGNOSIS:");
    Serial.println("  - Your ESP32 CANNOT see your PC. The network is blocking it.");
    Serial.println("  - Check your **WiFi Router** for **AP Isolation** (Client Isolation) and DISABLE it.");
    Serial.println("  - Check your PC's **Firewall** (though you said it's off, confirm it's completely disabled for this port).");
  } else {
    Serial.println("\n[SUCCESS] TCP Connection ESTABLISHED!");
    Serial.println("  DIAGNOSIS:");
    Serial.println("  - The network is OK. AP Isolation/Firewall is not the cause.");
    Serial.println("  - The problem is in the **HTTP protocol** or the server **crashing** upon receiving the request.");
    client.stop(); 
  }
  Serial.println("------------------------------------");
}


/**
 * Test 2: Full HTTP POST Request Check
 * This test attempts the full GraphQL authentication query.
 * Success means the server is running and the query is handled.
 * Failure means the server is running but rejects the request (e.g., 400, 500 errors).
 */
void runFullGraphQLTest() {
  Serial.println("\n--- 2. FULL HTTP GRAPHQL TEST ---");
  Serial.print("Sending Authentication Query to ");
  Serial.print(serverHost);
  Serial.print(":");
  Serial.print(serverPort);
  Serial.print(graphqlEndpoint);
  Serial.println("...");

  HTTPClient http;
  
  // Construct the full URL
  String url = String("http://") + serverHost + ":" + serverPort + graphqlEndpoint;
  http.begin(url);
  http.setTimeout(10000); // 10 second timeout
  http.addHeader("Content-Type", "application/json");
  
  // Build GraphQL query
  StaticJsonDocument<512> queryDoc;
  queryDoc["query"] = "{ authenticate(cardUid: \"" + testCardUID + "\", pin: \"" + testPIN + "\") { success message } }";
  
  String jsonPayload;
  serializeJson(queryDoc, jsonPayload);
  
  Serial.println("  Query: " + jsonPayload);
  
  int httpCode = http.POST(jsonPayload);
  
  Serial.print("\n  HTTP Response Code: ");
  Serial.println(httpCode);
  
  if (httpCode > 0) {
    String response = http.getString();
    Serial.println("\n[SUCCESS] Server returned a valid HTTP code!");
    Serial.print("  Server Response Size: ");
    Serial.print(response.length());
    Serial.println(" bytes.");
    
    // Parse JSON to check authentication status
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, response);
    
    if (error) {
      Serial.println("[FAIL] JSON PARSE ERROR: Check Python console for errors.");
    } else {
      bool success = doc["data"]["authenticate"]["success"];
      String message = doc["data"]["authenticate"]["message"].as<String>();
      Serial.println("\n[SUCCESS] JSON Parsed.");
      Serial.print("  Auth Success: ");
      Serial.println(success ? "YES" : "NO");
      Serial.print("  Message: ");
      Serial.println(message);
    }
  } else if (httpCode == -1) {
    Serial.println("\n[FATAL] HTTP Request Failed (Error code -1).");
    Serial.println("  This is consistent with the TCP test failure. See Test 1 diagnosis.");
  } else {
    Serial.print("\n[FAIL] HTTP Error: ");
    Serial.println(httpCode);
    Serial.println("  Check the Python server's console for a Traceback (crash report).");
  }
  
  http.end();
  Serial.println("-------------------------------------");
}
